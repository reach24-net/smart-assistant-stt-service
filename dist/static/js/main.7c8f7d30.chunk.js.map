{"version":3,"sources":["Context/Constants.js","Context/Reducer.js","Context/index.js","Components/WelcomeView/index.jsx","Components/TopHead/index.jsx","Components/TopHeadAction/index.jsx","Components/ErrorMessage/index.jsx","utils/transcribe.js","configuration/index.js","Components/ChatField/index.jsx","Components/RichComponent/index.jsx","Components/RichBubble/index.jsx","Components/Main/Main.jsx","utils/socket.js","Widget.jsx","index.jsx"],"names":["constants","SET_SESSION","SET_MESSAGES","ADD_MESSAGES","SHOULD_LISTEN","SET_IS_MUTED","SET_MICROPHONE","SET_DISABLED","ERROR_DATA","RESET_ALL","initialState","disabled","error","muted","microphone","session","messages","shouldListen","reducer","state","action","type","Constants","data","DialogFlowContext","React","createContext","DialogFlowContextProvider","props","useReducer","Reducer","contextState","dispatch","actions","resetAll","setSession","addMessage","addMessages","setShouldListen","setDisabled","setMicrophone","setIsMuted","setError","Provider","value","contextActions","children","WelcomeView","className","src","alt","memo","TopHead","target","rel","href","TopHeadAction","title","icon","toggle","onClick","ErrorMessage","message","AudioContext","context","processor","input","timeoutEnd","globalStream","endpoint","socketEndpoint","speechToText","fallback_lang","voice","codecs","OUTPUT_AUDIO_ENCODING_UNSPECIFIED","OUTPUT_AUDIO_ENCODING_LINEAR_16","OUTPUT_AUDIO_ENCODING_MP3","OUTPUT_AUDIO_ENCODING_OGG_OPUS","timeout","afterMessageTextToMicrophone","voiceRecognitionEndTimeout","mediaConstraints","video","audio","sampleRate","channelCount","volume","echoCancellation","noiseSuppression","AudioSpeech","this","socket","endMicrophoneCallback","interimResults","query","createSocket","microphoneProcess","bind","closeAll","stopRecording","getQuery","submit","isFinal","tempQuery","e","left","inputBuffer","getChannelData","left16","convertFloat32ToInt16","emit","io","connect","Config","transports","onData","onError","stopRecordingFunc","microphoneProcessFunc","window","webkitAudioContext","createScriptProcessor","destination","resume","navigator","mediaDevices","getUserMedia","then","stream","createMediaStreamSource","console","log","setTimeout","onaudioprocess","on","response","privText","tempText","setText","clearTimeout","privResult","off","destroy","tracks","getTracks","track","stop","disconnect","warn","close","buffer","l","length","buf","Int16Array","MediaRecorder","AudioRecorder","AudioSpeechInstances","ChatField","submitFun","stopOthersSound","useState","setInterimResults","setQuery","useContext","handleMicrophoneActions","a","handleDataReceived","results","initRecording","submitConversation","text","submission","payload","useEffect","isMicrophoneSupported","useMemo","webkitSpeechRecognition","SpeechRecognition","notSupported","autoFocus","placeholder","onKeyDown","code","onFocus","onChange","name","mode","classnames","mic_active","Boolean","RichComponent","me","fullwidth","RichBubble","loading","tabIndex","Audio","queue","predefinedData","App","initialized","setInitialized","sessionId","contextStateRef","useRef","current","isInitialized","initializeSocket","handleResponse","session_id","sessionObject","remoteId","id","WelcomeInit","reason","JSON","stringify","sendRequest","stopFeedback","speechSynthesis","cancel","paused","shift","pause","res","attachment","addToMessageList","push","queueData","handleAudioSpeech","callback","config","audioOutput","mime","onended","onerror","play","speech","SpeechSynthesisUtterance","voiceURI","lang","onend","speak","customData","language","user","finalRespond","v4","handleListen","map","Socket","url","path","onEvents","marker","Math","random","connected","event","socketUrl","options","SocketIO","sessionConfirmed","forEach","store","Widget","instanceSocket","socketRef","Main","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAoBeA,EApBG,CAChBC,YAAa,yBAEbC,aAAc,0BAEdC,aAAc,0BAEdC,cAAe,2BAEfC,aAAc,0BAEdC,eAAgB,4BAEhBC,aAAc,0BAEdC,WAAY,wBAEZC,UAAW,wB,eCfPC,EAAe,CACnBC,UAAU,EACVC,MAAO,KACPC,OAAO,EACPC,YAAY,EACZC,QAAS,KACTC,SAAU,GACVC,cAAc,GAyDDC,EAtDC,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKC,EAAUb,UACb,OAAO,eACFC,GAGP,KAAKY,EAAUrB,YACb,OAAO,2BACFkB,GADL,IAEEJ,QAASK,EAAOG,OAGpB,KAAKD,EAAUhB,eACb,OAAO,2BACFa,GADL,IAEEL,WAAYM,EAAOG,OAGvB,KAAKD,EAAUjB,aACb,OAAO,2BACFc,GADL,IAEEN,MAAOO,EAAOG,OAGlB,KAAKD,EAAUf,aACb,OAAO,2BACFY,GADL,IAEER,SAAUS,EAAOG,OAGrB,KAAKD,EAAUpB,aACb,OAAO,2BACFiB,GADL,IAEEH,SAAUI,EAAOG,OAGrB,KAAKD,EAAUnB,aACb,OAAO,2BACFgB,GADL,IAEEH,SAAS,GAAD,mBAAMG,EAAMH,UAAZ,CAAsBI,EAAOG,SAGzC,KAAKD,EAAUlB,cACb,OAAO,2BACFe,GADL,IAEEF,aAAcG,EAAOG,OAGzB,QACE,OAAOJ,I,OCzDPT,EAAe,CACnBC,UAAU,EACVC,MAAO,KACPC,OAAO,EACPC,YAAY,EACZC,QAAS,KACTC,SAAU,GACVC,cAAc,GAGVO,EAAoBC,IAAMC,gBAE1BC,EAA4B,SAACC,GACjC,MAAiCC,qBAAWC,EAASpB,GAArD,mBAAOqB,EAAP,KAAqBC,EAArB,KAEMC,EAAU,CACdC,SAAU,WACRF,EAAS,CAAEX,KAAMC,EAAUb,aAE7B0B,WAAY,SAACZ,GACXS,EAAS,CAAEX,KAAMC,EAAUrB,YAAasB,UAE1Ca,WAAY,SAACb,GACXS,EAAS,CAAEX,KAAMC,EAAUnB,aAAcoB,UAE3Cc,YAAa,SAACd,GACZS,EAAS,CAAEX,KAAMC,EAAUpB,aAAcqB,UAE3Ce,gBAAiB,SAACf,GAChBS,EAAS,CAAEX,KAAMC,EAAUlB,cAAemB,UAE5CgB,YAAa,SAAChB,GACZS,EAAS,CAAEX,KAAMC,EAAUf,aAAcgB,UAE3CiB,cAAe,SAACjB,GACdS,EAAS,CAAEX,KAAMC,EAAUhB,eAAgBiB,UAE7CkB,WAAY,SAAClB,GACXS,EAAS,CAAEX,KAAMC,EAAUjB,aAAckB,UAE3CmB,SAAU,SAACnB,GACTS,EAAS,CAAEX,KAAMC,EAAUd,WAAYe,WAI3C,OACE,cAACC,EAAkBmB,SAAnB,CACEC,MAAO,CACLb,aAAcA,EACdc,eAAgBZ,GAHpB,SAMGL,EAAMkB,Y,4CCpDb,SAASC,IACP,OACE,sBAAKC,UAAU,eAAf,UACE,qBACEA,UAAU,aACVC,IAAI,oEACJC,IAAK,WAIP,qBAAKF,UAAU,cAAf,uBAKSvB,UAAM0B,KAAKJ,G,MCf1B,SAASK,EAAT,GAAgC,IAAbN,EAAY,EAAZA,SACjB,OACE,yBAAQE,UAAU,WAAlB,UACE,sBAAKA,UAAU,qBAAf,UACE,qBACEA,UAAU,gBACVC,IAAI,kFACJC,IAAK,WAEP,sBAAKF,UAAU,gBAAf,UACE,qBAAKA,UAAU,iBAAf,oBACA,sBAAKA,UAAU,oBAAf,qBAEE,mBACEK,OAAO,SACPC,IAAI,sBACJC,KAAK,4BACL,cAAY,OAJd,qCAYN,8BAAMT,OAKGrB,UAAM0B,KAAKC,G,MC5B1B,SAASI,EAAT,GAA2D,IAAD,IAAjCC,aAAiC,MAAzB,GAAyB,MAArBC,YAAqB,MAAd,GAAc,EAAVC,EAAU,EAAVA,OAC9C,OACE,wBACEX,UAAU,kBACVS,MAAOA,EACP,aAAYA,EACZG,QAASD,EAJX,SAME,mBAAG,cAAY,OAAOX,UAAU,iBAAhC,SACGU,MAYMjC,UAAM0B,KAAKK,G,MCrB1B,SAASK,EAAT,GAA2C,IAAD,IAAlBC,eAAkB,MAAR,KAAQ,EACxC,OACE,sBAAKd,UAAU,gBAAf,UACE,mBAAGA,UAAU,oCAAoC,cAAY,OAA7D,mBAGA,qBAAKA,UAAU,4BAAf,SAA4Cc,OASnCrC,ICjBbsC,EACAC,EACAC,EACAC,EACAC,EACAC,EDYa3C,MAAM0B,KAAKU,G,+DErBX,GACbQ,SAGM,OACNC,eAGM,0CACNC,aACqE,IACrEC,cAAe,QACfC,MAAO,SACPC,OAAQ,CAENC,kCAAmC,YACnCC,gCAAiC,YACjCC,0BAA2B,aAC3BC,+BAAgC,aAElCC,QAAS,CACPC,6BAA8B,IAC9BC,2BAA4B,ODX1BC,EAAmB,CACvBC,OAAO,EACPC,MAAO,CACLC,WAAY,KACZC,aAAc,EACdC,OAAQ,EACRC,kBAAkB,EAClBC,kBAAkB,IA8NPC,E,WAzNb,aAAe,oBACbC,KAAKC,OAAS,KACdD,KAAKE,sBAAwB,KAC7BF,KAAKG,eAAiB,GACtBH,KAAKI,MAAQ,GAEbJ,KAAKK,eAELL,KAAKM,kBAAoBN,KAAKM,kBAAkBC,KAAKP,MACrDA,KAAKQ,SAAWR,KAAKQ,SAASD,KAAKP,MACnCA,KAAKS,cAAgBT,KAAKS,cAAcF,KAAKP,MAC7CA,KAAKU,SAAWV,KAAKU,SAASH,KAAKP,MACnCA,KAAKW,OAAS,K,2CAGhB,SAAQP,EAAOQ,GACb,IAAIC,EAAYb,KAAKI,MASrB,OARIQ,GACER,GAAsB,MAAbA,EAAM,GAAYS,GAAwBT,EAClDS,EAAYA,EAAY,IAAMT,EAEnCJ,KAAKG,eAAiB,GACtBH,KAAKI,MAAQS,GACRb,KAAKG,eAAiBC,EAEtBS,I,sBAGT,WACE,OAAOb,KAAKI,Q,+BAQd,SAAkBU,GAChB,IAAMC,EAAOD,EAAEE,YAAYC,eAAe,GACpCC,EAASlB,KAAKmB,sBAAsBJ,GAC1Cf,KAAKC,OAAOmB,KAAK,kBAAmBF,K,0BAItC,WACE,IAAIjB,EAAS,IAAIoB,IAAGC,QAAQC,EAAO3C,aAAc,CAC/C4C,WAAY,CAAC,eAEfxB,KAAKC,OAASA,I,2BAUhB,SAAcwB,EAAQvB,EAAuBS,EAAQe,GAAU,IAAD,OAC5D1B,KAAKE,sBAAwBA,EAE7B,IAAMyB,EAAoB3B,KAAKS,cACzBmB,EAAwB5B,KAAKM,kBAC7BI,EAAWV,KAAKU,SAEtBV,KAAKC,OAAOmB,KAAK,0BAEjBhD,EAAeyD,OAAOzD,cAAgByD,OAAOC,mBAC7CzD,EAAU,IAAID,GACdE,EAAYD,EAAQ0D,sBAzFP,KAyFyC,EAAG,IAC/CT,QAAQjD,EAAQ2D,aAC1B3D,EAAQ4D,SAoCRC,UAAUC,aAAaC,aAAa7C,GAAkB8C,MAlChC,SAAUC,GAC1BjE,IACFI,EAAe6D,GACf/D,EAAQF,EAAQkE,wBAAwBD,IAClChB,QAAQhD,GACdkE,QAAQC,IAAI,iBAEZjE,EAAakE,YAAW,WACtBF,QAAQC,IAAI,uCAEZd,MACC,KAiBHrD,EAAUqE,eAAiB,SAAU7B,GACnCc,EAAsBd,QAOxBW,IACFzB,KAAKC,OAAO2C,GAAG,cAAc,SAACC,GAC5BL,QAAQC,IAAI,aAAZ,OAA0BI,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAUC,UACpC,IAAIC,EAAW,EAAKC,QAAL,OAAaH,QAAb,IAAaA,OAAb,EAAaA,EAAUC,UAAU,GAEhDrB,EAAOsB,GAAU,GAEjBE,aAAazE,GACbA,EAAakE,YAAW,WACtB/B,EAAOD,KAEPiB,MACCJ,EAAOnC,QAAQE,+BAGpBU,KAAKC,OAAO2C,GAAG,qBAAqB,SAACC,GAAc,IAAD,MAChDL,QAAQC,IAAI,oBAAZ,OAAiCI,QAAjC,IAAiCA,GAAjC,UAAiCA,EAAUK,kBAA3C,aAAiC,EAAsBJ,UACvD,EAAKE,QAAL,OAAaH,QAAb,IAAaA,GAAb,UAAaA,EAAUK,kBAAvB,aAAa,EAAsBJ,UAAU,GAE7CrB,EAAM,OAACoB,QAAD,IAACA,GAAD,UAACA,EAAUK,kBAAX,aAAC,EAAsBJ,UAAU,GAEnCtE,GACFyE,aAAazE,OAKnBwB,KAAKC,OAAO2C,GAAG,0BAA0B,SAAC3H,GACpCyG,GACFA,EAAQ,SAEV,EAAKjB,mBAGPT,KAAKC,OAAO2C,GAAG,wBAAwB,WACrC,EAAKnC,qB,sBAOT,WAEE+B,QAAQC,IAAI,oBACZzC,KAAKC,OAAOkD,IAAI,cAChBnD,KAAKC,OAAOkD,IAAI,qBAChBnD,KAAKC,OAAOkD,IAAI,0BAEZ3E,GACFyE,aAAazE,GAGfwB,KAAKC,OAAOmD,UAEZ,IAAIC,EAAS5E,EAAeA,EAAa6E,YAAc,KACnDC,EAAQF,EAASA,EAAO,GAAK,KAKjC,GAJIE,GACFA,EAAMC,OAGJlF,EAAW,CACb,GAAIC,EACF,IACEA,EAAMkF,WAAWnF,GACjB,MAAOrD,GACPuH,QAAQkB,KAAK,uCAGbrF,GAASC,EAAUmF,WAAWpF,EAAQ2D,aAExC3D,GACFA,EAAQsF,QAAQtB,MAAK,WACnB9D,EAAQ,KACRD,EAAY,KACZD,EAAU,KACVD,EAAe,QAGnB4B,KAAKC,OAAO2C,GAAG,cAEf5C,KAAKE,0B,2BAGP,WACEF,KAAKC,OAAOmB,KAAK,wBACjBpB,KAAKQ,a,mCASP,SAAsBoD,GAIpB,IAHA,IAAIC,EAAID,EAAOE,OACXC,EAAM,IAAIC,WAAWH,EAAI,GAEtBA,KACDA,EAAI,IAAM,IACZE,EAAIF,EAAI,GAAiB,MAAZD,EAAOC,IAGxB,OAAOE,EAAIH,W,KE5Nf/B,OAAOoC,cAAgBC,IAEvB,IAEIC,EAAuB,KAE3B,SAASC,EAAT,GAA4D,IAAD,OAA9BC,EAA8B,EAAtC1D,OAAmB2D,EAAmB,EAAnBA,gBACtC,EAA4CxI,IAAMyI,SAAS,IAA3D,mBAAOpE,EAAP,KAAuBqE,EAAvB,KACA,EAA0B1I,IAAMyI,SAAS,IAAzC,mBAAOnE,EAAP,KAAcqE,EAAd,KAEA,EAAyC3I,IAAM4I,WAAW7I,GAAlDqB,EAAR,EAAQA,eAAgBd,EAAxB,EAAwBA,aAChBd,EAA+Cc,EAA/Cd,aAAR,EAAuDc,EAAjCpB,gBAAtB,SAAwCG,EAAeiB,EAAfjB,WAElCwJ,EAAuB,uCAAG,0CAAAC,EAAA,uFAkFnBC,EAAT,SAA4BC,GAA2B,IAAlBlE,EAAiB,wDAEhDkE,IACElE,GACF4D,EAAkB,IAClBC,GAAS,SAACrE,GAAD,OAAWA,EAAQ0E,MACvBN,EAAkBM,KAIpBtE,EAAT,WACE2D,EAAuB,KACvBjH,EAAeL,eAAc,GAC7B8H,GAAwB,IA3F1BL,IA8FAH,EAAuB,IAAIpE,EAE3B7C,EAAeL,eAAc,GAE7BsH,EAAqBY,cACnBF,EAAmBtE,KAAK,GACxBC,EACAwE,GACA,SAAC/J,GACCuH,QAAQvH,MAAM,0BAA2BA,GACzCiC,EAAeL,eAAc,QAK7B1B,GAAY+B,EAAeL,eAAc,GAOzCsH,GACFA,EAAqB1D,iBAzHK,2CAAH,qDA8HvBuE,EAAqB,SAAC5E,GAC1BO,EAAO,CAAEsE,KAAM7E,KAGXO,EAAS,SAACuE,GACdT,EAAS,IACTD,EAAkB,IACdU,EAAWD,MAAQC,EAAWD,KAAKnB,OAAS,GAC9CO,EAAU,CAAE3I,KAAM,OAAQyJ,QAASD,KAiBvCpJ,IAAMsJ,WAAU,WACV9J,IACEH,GACFwJ,GAAwB,GACxBF,EAAS,KACJE,GAAwB,MAIhC,CAACxJ,IAEJ,IAAMkK,EAAwBvJ,IAAMwJ,SAAQ,WAC1C,OACEzD,OAAO0D,yBACP1D,OAAO2D,oBACN3D,OAAOoC,cAAcwB,eAEvB,IAEH,OACE,qBAAKpI,UAAU,aAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,sBAAKA,UAAU,sBAAf,UAEE,uBACEJ,MAAOmD,EAAQD,EACf9C,UAAU,mBACV3B,KAAK,OACLgK,WAAS,EACTC,YAAa,UACb,aAAY,UACZ3K,SAAUA,EACV4K,UApCiB,SAAC9E,GACX,UAAXA,EAAE+E,MAAkBlF,EAAO,CAAEsE,KAAM7E,KAoC/B0F,QA1Ce,SAAChF,GACxB6D,GAAwB,GACxBL,KAyCQyB,SA/CgB,SAACjF,GACzB2D,EAAS3D,EAAEpD,OAAOT,UAkDZ,qBAAK+I,KAAK,8BAA8BC,KAAK,SAA7C,UACK9K,GAAciF,EAAM0D,OAAS,IAAOuB,EACrC,wBAEEhI,UAAU,oBACVS,MAAO,OACP,aAAY,OACZ9C,SAAUA,EACViD,QAAS,WACP0C,EAAO,CAAEsE,KAAM7E,KAPnB,SAUE,mBAAG/C,UAAU,iBAAiB,cAAY,OAA1C,2BATI,QAcN,mCAEE,wBAEEA,UAAW6I,IAAW,oBAAqB,CACzCC,WAAYC,QAAQjL,KAEtB,aAAY,cACZ2C,MAAO,cACP9C,SAAUA,EACViD,QAAS,YACc,IAAjB3C,IAAyC,IAAfH,GAC5B+B,EAAeP,iBAAgB,GAEjCO,EAAeL,eAAe1B,IAZlC,SAeE,mBAAGkC,UAAU,iBAAiB,cAAY,OAA1C,kBAdI,yBAgCPvB,UAAM0B,KAAK4G,G,MCtQ1B,SAASiC,EAAT,GAAqD,IAA5BC,EAA2B,EAA3BA,GAAIC,EAAuB,EAAvBA,UAAWpJ,EAAY,EAAZA,SACtC,OACE,qBACEE,UAAW6I,IAAW,iBAAkB,CAAEI,GAAIA,EAAIC,UAAWA,IAD/D,SAGGpJ,IAUQrB,UAAM0B,KAAK6I,G,MCf1B,SAASG,EAAT,GAAiD,IAAD,IAA1BvB,YAA0B,MAAnB,GAAmB,EAAfqB,EAAe,EAAfA,GAAIG,EAAW,EAAXA,QACnC,OACE,qBACEpJ,UAAW6I,IAAW,cAAe,CACnCI,GAAIA,EACJG,QAASA,IAEXC,SAAS,IALX,SAOGzB,IAWQnJ,UAAM0B,KAAKgJ,GCPtB/G,EAAQ,IAAIkH,MACZC,EAAQ,GAENC,GAAiB,CACrBb,KAAM,QAoSOc,OAjSf,YAA0B,IAAX7G,EAAU,EAAVA,OACb,EAAsCnE,IAAMyI,UAAS,GAArD,mBAAOwC,EAAP,KAAoBC,EAApB,KAEA,EAAyClL,IAAM4I,WAAW7I,GAAlDO,EAAR,EAAQA,aAAcc,EAAtB,EAAsBA,eACL+J,EAAgD7K,EAAzDhB,QAAoBC,EAAqCe,EAArCf,SAAUL,EAA2BoB,EAA3BpB,SAAUM,EAAiBc,EAAjBd,aAE1C4L,EAAkBpL,IAAMqL,OAAO/K,GAErCN,IAAMsJ,WAAU,WACd8B,EAAgBE,QAAUhL,IACzB,CAACA,IAEJN,IAAMsJ,WAAU,WAKd,OAHKnF,EAAOoH,iBAAiBC,IAGtB,WACDrH,GAAQA,EAAO0D,WAIpB,IAEH,IAAM2D,EAAgB,uCAAG,sBAAA1C,EAAA,sDAClB3E,EAAOoH,kBACVpH,EAAOI,eAEPJ,EAAO2C,GAAG,cAAe2E,GAEzBtH,EAAO2C,GAAG,WAAW,WACnB3C,EAAOmB,KAAK,kBAAmB,CAC7BoG,WAAYP,OAKhBhH,EAAO2C,GAAG,mBAAmB,SAAC6E,GAC5B,IAAMC,EACJD,GAAiBA,EAAcD,WAC3BC,EAAcD,WACdC,EAENjF,QAAQC,IAAR,0BACqBxC,EAAOA,OAAO0H,GADnC,uBACoDD,IAGpDxK,EAAeV,WAAWyD,EAAOA,OAAO0H,IACxCC,OAGF3H,EAAO2C,GAAG,cAAc,SAACiF,GACvBrF,QAAQC,IAAIoF,GACG,yBAAXA,GACF5H,EAAO0D,YA9BU,2CAAH,qDAoChBiE,EAAc,WAClB,GAAKX,EAAL,CAGA,IAAMhC,EAAO,SAAW6C,KAAKC,UAAUlB,IAEvCmB,EAAY,CACV7C,QAAS,CAAEF,KAAMA,KAGnB+B,GAAe,KAIXiB,EAAe,WACfpG,OAAOqG,iBAAiBrG,OAAOqG,gBAAgBC,SAC/C1I,IAAUA,EAAM2I,SACdxB,EAAM9C,OAAS,GAAG8C,EAAMyB,QAC5B5I,EAAM6I,UAgBJf,EAAc,uCAAG,WAAO1E,GAAP,mBAAA+B,EAAA,sDACjBxI,EAAe8K,EAAgBE,QAE7BmB,EAAM1F,EAAS2F,WAGrBC,EAAiBF,GAGbnM,EAAajB,YACf+B,EAAeL,eAAc,GAKV,IAAjB+J,EAAM9C,QACR8C,EAAM8B,KAAKH,GACLI,EAAY/B,EAAM,GACxBgC,EAAkBD,IAElB/B,EAAM8B,KAAKH,GApBQ,2CAAH,sDAwBdK,EAAiB,uCAAG,WAAO/F,GAAP,MAGfgG,EAHe,aAAAjE,EAAA,sDAGfiE,EAHe,WAItB,IAAMF,EAAY/B,EAAM,GAEpB+B,GAAWC,EAAkBD,KAL/BvM,EAAe8K,EAAgBE,SAQjBlM,OAmDhB0L,EAAQ,GAEJxK,EAAad,cACfoH,YAAW,WACTxF,EAAeL,eAAc,KAC5BiM,EAAO1J,QAAQC,+BAvDhBwD,EAASsC,QAAQ4D,aAEbC,EAAOF,EAAO/J,OAAOC,kCAC3BS,EAAMnC,IAAN,eAAoB0L,EAApB,mBAAmCnG,EAASsC,QAAQ4D,aAEpDtJ,EAAMwJ,QAAU,WACdrC,EAAMyB,QAGe,IAAjBzB,EAAM9C,OAEJ1H,EAAad,cACfoH,YAAW,WACTxF,EAAeL,eAAc,KAC5BiM,EAAO1J,QAAQC,8BAGpBwJ,KAIJpJ,EAAMyJ,QAAU,WACdtC,EAAMyB,SAGR5I,EAAM0J,UAGAC,EAAS,IAAIC,yBAAyBxG,EAASsC,QAAQF,OACtDqE,SAAWR,EAAOhK,MACzBsK,EAAOG,KAAOT,EAAOjK,cAErBuK,EAAOI,MAAQ,WACb5C,EAAMyB,QAGe,IAAjBzB,EAAM9C,OACJ1H,EAAad,cACfoH,YAAW,WACTxF,EAAeL,eAAc,KAC5BiM,EAAO1J,QAAQC,8BAGpBwJ,KAICzM,EAAalB,OAAO2G,OAAOqG,gBAAgBuB,MAAML,IAzDlC,2CAAH,sDAsEjBpB,EAAc,SAACpM,GACdqL,IAELwB,EAAiB7M,GAAM,GAEvBqM,IACA/K,EAAeH,SAAS,MAExByF,QAAQC,IAAI,kBAAmB7G,GAE/BqE,EAAOmB,KAAK,eAAgB,CAC1BjD,QAASvC,EAAKuJ,QAAQF,KACtByE,WAAY,CACVC,SAAU,MAEZnC,WAAYP,MAIVwB,EAAmB,SAACtK,GAA2B,IAAlByL,EAAiB,wDAC5CC,EAAY,aAChBlC,GAAImC,cACJxD,GAAIsD,GACDzL,GAGLjB,EAAeT,WAAWoN,IAY5B,OACE,+CAAMlC,GAAG,QAAYZ,GAAe,CAAE9I,QAAS,kBAAM2J,OAArD,cACGb,GACC,eAAC,EAAD,WACE,cAAC,EAAD,CACEjJ,MAAO1B,EAAalB,MAAQ,SAAW,OACvC6C,KAAM3B,EAAalB,MAAQ,aAAe,YAC1C8C,OAAQ,WAtJE,IAAC9C,KAuJIkB,EAAalB,MAtJpCuE,EAAMvE,MAAQA,EACVA,GAAO+M,IACX/K,EAAeJ,WAAW5B,MAuJpB,cAAC,EAAD,CACE4C,MAAOxC,EAAe,kBAAoB,mBAC1CyC,KAAMzC,EAAe,UAAY,mBACjC0C,OAAQ,YAvJG,SAAC1C,GACpB4B,EAAeP,gBAAgBrB,GAuJrByO,EAAczO,MAGlB,cAAC,EAAD,CAAewC,MAAO,QAASC,KAAM,YAAaC,OA3B5C,WACZiK,IACA/K,EAAeX,WACfyK,GAAe,GAEf/G,EAAO0D,QACP2D,UAyBE,0BAASjK,UAAU,OAAnB,UAEGjB,EAAanB,OAAS,cAAC,EAAD,CAAckD,QAAS/B,EAAanB,QAGtC,IAApBI,EAASyI,OACR,cAAC,EAAD,IAEA,yBAAS,YAAU,SAAnB,SACGzI,EAAS2O,KAAI,SAAC7L,GAAa,IAAD,IAEzB,MACO,SADCA,EAAQzC,KAGV,cAAC,EAAD,CAAgC4K,GAAE,UAAEnI,EAAQmI,UAAV,SAAlC,SACGnI,EAAQgH,SACP,cAAC,EAAD,aACEmB,GAAE,UAAEnI,EAAQmI,UAAV,UACEnI,EAAQgH,WAJEhH,EAAQwJ,IAUvB,aAQnB,cAAC,EAAD,CACEhH,OAAQqH,EACR1D,gBAAiB2D,EACjBjN,SAAUA,IAAa+L,S,ICxOhBkD,G,WArDb,WAAYC,EAAKR,EAAYS,GAAO,oBAClCnK,KAAKkK,IAAMA,EACXlK,KAAK0J,WAAaA,EAClB1J,KAAKmK,KAAOA,EAEZnK,KAAKC,OAAS,KACdD,KAAKoK,SAAW,GAChBpK,KAAKqK,OAASC,KAAKC,S,iDAGrB,WACE,OAAuB,OAAhBvK,KAAKC,QAAmBD,KAAKC,OAAOuK,Y,gBAG7C,SAAGC,EAAO5B,GACH7I,KAAKC,OAGRD,KAAKC,OAAO2C,GAAG6H,EAAO5B,GAFtB7I,KAAKoK,SAAS1B,KAAK,CAAE+B,QAAO5B,e,kBAMhC,SAAK1K,EAASvC,GACRoE,KAAKC,QACPD,KAAKC,OAAOmB,KAAKjD,EAASvC,K,mBAI9B,WACMoE,KAAKC,QACPD,KAAKC,OAAO0D,U,0BAIhB,WAAgB,IAAD,OACb3D,KAAKC,OA5DT,SAAkByK,EAAWhB,EAAYS,GACvC,IAAMQ,EAAUR,EAAO,CAAEA,QAAS,GAC5BlK,EAASoB,IAAGqJ,EAAWC,GAmB7B,OAjBA1K,EAAO2C,GAAG,WAAW,WACnBJ,QAAQC,IAAR,kBAAuBxC,EAAO0H,KAC9B1H,EAAOyJ,WAAaA,KAGtBzJ,EAAO2C,GAAG,iBAAiB,SAAC3H,GAC1BuH,QAAQC,IAAIxH,MAGdgF,EAAO2C,GAAG,SAAS,SAAC3H,GAClBuH,QAAQC,IAAIxH,MAGdgF,EAAO2C,GAAG,cAAc,SAACiF,GACvBrF,QAAQC,IAAIoF,MAGP5H,EAuCS2K,CAAS5K,KAAKkK,IAAKlK,KAAK0J,WAAY1J,KAAKmK,MAGvDnK,KAAKC,OAAO2C,GAAG,mBAAmB,SAAC6E,GACjC,EAAKoD,kBAAmB,EACxB,EAAK5D,UACHQ,GAAiBA,EAAcD,WAC3BC,EAAcD,WACdC,KAERzH,KAAKoK,SAASU,SAAQ,SAACL,GACrB,EAAKxK,OAAO2C,GAAG6H,EAAMA,MAAOA,EAAM5B,aAGpC7I,KAAKoK,SAAW,O,KClEhBW,GAAQ,KAEZ,SAASC,KACP,IAAMC,EAAiBnP,IAAMqL,OAAO,IA2BpC,OAxBK8D,EAAe7D,QAAQ8C,KAASa,IAASA,GAAMG,YAClD1I,QAAQC,IAAI,eAGZwI,EAAe7D,QAAU,IAAI6C,GAC3BnB,EAAOnK,eACP,CACEgL,SAAU,MAEZ,iBAKCsB,EAAe7D,QAAQ8C,KAAOa,IAASA,GAAMG,YAChDD,EAAe7D,QAAU2D,GAAM9K,QAG5B8K,MACHA,GAAQ,IACFG,UAAYD,EAAe7D,QAAQiD,OACzCU,GAAM9K,OAASgL,EAAe7D,SAGzB,cAAC+D,GAAD,CAAMlL,OAAQgL,EAAe7D,UAGvBtL,WAAM0B,KAAKwN,IClC1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.7c8f7d30.chunk.js","sourcesContent":["const constants = {\r\n  SET_SESSION: \"DialogFlow_SET_SESSION\",\r\n\r\n  SET_MESSAGES: \"DialogFlow_SET_MESSAGES\",\r\n\r\n  ADD_MESSAGES: \"DialogFlow_ADD_MESSAGES\",\r\n\r\n  SHOULD_LISTEN: \"DialogFlow_SHOULD_LISTEN\",\r\n\r\n  SET_IS_MUTED: \"DialogFlow_SET_IS_MUTED\",\r\n\r\n  SET_MICROPHONE: \"DialogFlow_SET_MICROPHONE\",\r\n\r\n  SET_DISABLED: \"DialogFlow_SET_DISABLED\",\r\n\r\n  ERROR_DATA: \"DialogFlow_ERROR_DATA\",\r\n\r\n  RESET_ALL: \"DialogFlow_RESET_ALL\",\r\n};\r\n\r\nexport default constants;\r\n","import Constants from \"./Constants.js\";\r\n\r\nconst initialState = {\r\n  disabled: false,\r\n  error: null,\r\n  muted: false,\r\n  microphone: false,\r\n  session: null,\r\n  messages: [],\r\n  shouldListen: true,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case Constants.RESET_ALL:\r\n      return {\r\n        ...initialState,\r\n      };\r\n\r\n    case Constants.SET_SESSION:\r\n      return {\r\n        ...state,\r\n        session: action.data,\r\n      };\r\n\r\n    case Constants.SET_MICROPHONE:\r\n      return {\r\n        ...state,\r\n        microphone: action.data,\r\n      };\r\n\r\n    case Constants.SET_IS_MUTED:\r\n      return {\r\n        ...state,\r\n        muted: action.data,\r\n      };\r\n\r\n    case Constants.SET_DISABLED:\r\n      return {\r\n        ...state,\r\n        disabled: action.data,\r\n      };\r\n\r\n    case Constants.SET_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: action.data,\r\n      };\r\n\r\n    case Constants.ADD_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.data],\r\n      };\r\n\r\n    case Constants.SHOULD_LISTEN:\r\n      return {\r\n        ...state,\r\n        shouldListen: action.data,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useReducer } from \"react\";\r\n\r\nimport Constants from \"./Constants.js\";\r\nimport Reducer from \"./Reducer.js\";\r\n\r\nconst initialState = {\r\n  disabled: false,\r\n  error: null,\r\n  muted: false,\r\n  microphone: false,\r\n  session: null,\r\n  messages: [],\r\n  shouldListen: true,\r\n};\r\n\r\nconst DialogFlowContext = React.createContext();\r\n\r\nconst DialogFlowContextProvider = (props) => {\r\n  const [contextState, dispatch] = useReducer(Reducer, initialState);\r\n\r\n  const actions = {\r\n    resetAll: () => {\r\n      dispatch({ type: Constants.RESET_ALL });\r\n    },\r\n    setSession: (data) => {\r\n      dispatch({ type: Constants.SET_SESSION, data });\r\n    },\r\n    addMessage: (data) => {\r\n      dispatch({ type: Constants.ADD_MESSAGES, data });\r\n    },\r\n    addMessages: (data) => {\r\n      dispatch({ type: Constants.SET_MESSAGES, data });\r\n    },\r\n    setShouldListen: (data) => {\r\n      dispatch({ type: Constants.SHOULD_LISTEN, data });\r\n    },\r\n    setDisabled: (data) => {\r\n      dispatch({ type: Constants.SET_DISABLED, data });\r\n    },\r\n    setMicrophone: (data) => {\r\n      dispatch({ type: Constants.SET_MICROPHONE, data });\r\n    },\r\n    setIsMuted: (data) => {\r\n      dispatch({ type: Constants.SET_IS_MUTED, data });\r\n    },\r\n    setError: (data) => {\r\n      dispatch({ type: Constants.ERROR_DATA, data });\r\n    },\r\n  };\r\n\r\n  return (\r\n    <DialogFlowContext.Provider\r\n      value={{\r\n        contextState: contextState,\r\n        contextActions: actions,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </DialogFlowContext.Provider>\r\n  );\r\n};\r\n\r\nexport { DialogFlowContext, DialogFlowContextProvider };\r\n","import React from \"react\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction WelcomeView() {\r\n  return (\r\n    <div className=\"welcome-view\">\r\n      <img\r\n        className=\"agent-icon\"\r\n        src=\"https://prescienceds.com/wp-content/uploads/2020/09/logo_main.png\"\r\n        alt={\"Olivia\"}\r\n      />\r\n\r\n      {/*  Title  */}\r\n      <div className=\"agent-title\">Olivia</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(WelcomeView);\r\n","import React from \"react\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction TopHead({ children }) {\r\n  return (\r\n    <header className=\"top-head\">\r\n      <div className=\"top-head-container\">\r\n        <img\r\n          className=\"top-head-icon\"\r\n          src=\"https://prescienceds.com/wp-content/uploads/2020/08/cropped-favicon-180x180.png\"\r\n          alt={\"Olivia\"}\r\n        />\r\n        <div className=\"top-head-info\">\r\n          <div className=\"top-head-title\">Olivia</div>\r\n          <div className=\"top-head-subtitle\">\r\n            Built by\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"https://prescienceds.com/\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              &nbsp;Prescience\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>{children}</div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default React.memo(TopHead);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction TopHeadAction({ title = \"\", icon = \"\", toggle }) {\r\n  return (\r\n    <button\r\n      className=\"top-head-action\"\r\n      title={title}\r\n      aria-label={title}\r\n      onClick={toggle}\r\n    >\r\n      <i aria-hidden=\"true\" className=\"material-icons\">\r\n        {icon}\r\n      </i>\r\n    </button>\r\n  );\r\n}\r\n\r\nTopHeadAction.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n  toggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(TopHeadAction);\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction ErrorMessage({ message = null }) {\r\n  return (\r\n    <div className=\"error-message\">\r\n      <i className=\"material-icons error-message-icon\" aria-hidden=\"true\">\r\n        error\r\n      </i>\r\n      <div className=\"error-message-description\">{message}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nErrorMessage.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default React.memo(ErrorMessage);\r\n","import io from \"socket.io-client\";\r\n\r\nimport Config from \"../configuration\";\r\n\r\nlet bufferSize = 2048,\r\n  AudioContext,\r\n  context,\r\n  processor,\r\n  input,\r\n  timeoutEnd,\r\n  globalStream;\r\n\r\nconst mediaConstraints = {\r\n  video: false,\r\n  audio: {\r\n    sampleRate: 48000,\r\n    channelCount: 2,\r\n    volume: 1.0,\r\n    echoCancellation: true,\r\n    noiseSuppression: true,\r\n  },\r\n};\r\n\r\nclass AudioSpeech {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.endMicrophoneCallback = null;\r\n    this.interimResults = \"\";\r\n    this.query = \"\";\r\n\r\n    this.createSocket();\r\n\r\n    this.microphoneProcess = this.microphoneProcess.bind(this);\r\n    this.closeAll = this.closeAll.bind(this);\r\n    this.stopRecording = this.stopRecording.bind(this);\r\n    this.getQuery = this.getQuery.bind(this);\r\n    this.submit = null;\r\n  }\r\n\r\n  setText(query, isFinal) {\r\n    let tempQuery = this.query;\r\n    if (isFinal) {\r\n      if (query && query[0] === \" \") tempQuery = tempQuery + query;\r\n      else tempQuery = tempQuery + \" \" + query;\r\n\r\n      this.interimResults = \"\";\r\n      this.query = tempQuery;\r\n    } else this.interimResults = query;\r\n\r\n    return tempQuery;\r\n  }\r\n\r\n  getQuery() {\r\n    return this.query;\r\n  }\r\n\r\n  /**\r\n   * Processes microphone data into a data stream\r\n   *\r\n   * @param {object} e Input from the microphone\r\n   */\r\n  microphoneProcess(e) {\r\n    const left = e.inputBuffer.getChannelData(0);\r\n    const left16 = this.convertFloat32ToInt16(left);\r\n    this.socket.emit(\"binaryAudioData\", left16);\r\n  }\r\n\r\n  /* Create Socket */\r\n  createSocket() {\r\n    let socket = new io.connect(Config.speechToText, {\r\n      transports: [\"websocket\"],\r\n    });\r\n    this.socket = socket;\r\n  }\r\n\r\n  /**\r\n   * @param {function} onData Callback to run on data each time it's received\r\n   * @param {function} endMicrophoneCallback Triggered when this conversation ends\r\n   * @param {function} submit Callback when conversation has ended\r\n   * @param {function} onError Callback to run on an error if one is emitted.\r\n   */\r\n\r\n  initRecording(onData, endMicrophoneCallback, submit, onError) {\r\n    this.endMicrophoneCallback = endMicrophoneCallback;\r\n\r\n    const stopRecordingFunc = this.stopRecording;\r\n    const microphoneProcessFunc = this.microphoneProcess;\r\n    const getQuery = this.getQuery;\r\n\r\n    this.socket.emit(\"startGoogleCloudStream\");\r\n\r\n    AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    context = new AudioContext();\r\n    processor = context.createScriptProcessor(bufferSize, 1, 1);\r\n    processor.connect(context.destination);\r\n    context.resume();\r\n\r\n    const handleSuccess = function (stream) {\r\n      if (context) {\r\n        globalStream = stream;\r\n        input = context.createMediaStreamSource(stream);\r\n        input.connect(processor);\r\n        console.log(\"handleSuccess\");\r\n\r\n        timeoutEnd = setTimeout(() => {\r\n          console.log(\"stopped without speaking timeoutEnd\");\r\n\r\n          stopRecordingFunc();\r\n        }, 7000);\r\n\r\n        // hark(stream).on(\"stopped_speaking\", () => {\r\n        //   console.log(\"stopped_speaking\");\r\n        //   if (timeoutEnd) clearTimeout(timeoutEnd);\r\n        //   timeoutEnd = setTimeout(() => {\r\n        //     console.log(\"stoped timeoutEnd\");\r\n        //     submit(getQuery());\r\n\r\n        //     stopRecordingFunc();\r\n        //   }, Config.timeout.voiceRecognitionEndTimeout);\r\n        // });\r\n\r\n        // hark(stream).on(\"speaking\", () => {\r\n        //   console.log(\"speaking\");\r\n        // });\r\n\r\n        processor.onaudioprocess = function (e) {\r\n          microphoneProcessFunc(e);\r\n        };\r\n      }\r\n    };\r\n\r\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(handleSuccess);\r\n\r\n    if (onData) {\r\n      this.socket.on(\"speechData\", (response) => {\r\n        console.log(\"speechData\", response?.privText);\r\n        let tempText = this.setText(response?.privText, true);\r\n\r\n        onData(tempText, true);\r\n\r\n        clearTimeout(timeoutEnd);\r\n        timeoutEnd = setTimeout(() => {\r\n          submit(getQuery());\r\n\r\n          stopRecordingFunc();\r\n        }, Config.timeout.voiceRecognitionEndTimeout);\r\n      });\r\n\r\n      this.socket.on(\"speechDataInterim\", (response) => {\r\n        console.log(\"speechDataInterim\", response?.privResult?.privText);\r\n        this.setText(response?.privResult?.privText, false);\r\n\r\n        onData(response?.privResult?.privText, false);\r\n\r\n        if (timeoutEnd) {\r\n          clearTimeout(timeoutEnd);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.socket.on(\"googleCloudStreamError\", (error) => {\r\n      if (onError) {\r\n        onError(\"error\");\r\n      }\r\n      this.stopRecording();\r\n    });\r\n\r\n    this.socket.on(\"endGoogleCloudStream\", () => {\r\n      this.stopRecording();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stops recording and closes everything down. Runs on error or on stop.\r\n   */\r\n  closeAll() {\r\n    // Clear the listeners (prevents issue if opening and closing repeatedly)\r\n    console.log(\"closeAll started\");\r\n    this.socket.off(\"speechData\");\r\n    this.socket.off(\"speechDataInterim\");\r\n    this.socket.off(\"googleCloudStreamError\");\r\n\r\n    if (timeoutEnd) {\r\n      clearTimeout(timeoutEnd);\r\n    }\r\n\r\n    this.socket.destroy();\r\n\r\n    let tracks = globalStream ? globalStream.getTracks() : null;\r\n    let track = tracks ? tracks[0] : null;\r\n    if (track) {\r\n      track.stop();\r\n    }\r\n\r\n    if (processor) {\r\n      if (input) {\r\n        try {\r\n          input.disconnect(processor);\r\n        } catch (error) {\r\n          console.warn(\"Attempt to disconnect input failed.\");\r\n        }\r\n      }\r\n      if (context) processor.disconnect(context.destination);\r\n    }\r\n    if (context) {\r\n      context.close().then(function () {\r\n        input = null;\r\n        processor = null;\r\n        context = null;\r\n        AudioContext = null;\r\n      });\r\n    }\r\n    this.socket.on(\"disconnect\");\r\n\r\n    this.endMicrophoneCallback();\r\n  }\r\n\r\n  stopRecording() {\r\n    this.socket.emit(\"endGoogleCloudStream\");\r\n    this.closeAll();\r\n  }\r\n\r\n  /**\r\n   * Converts a buffer from float32 to int16. Necessary for streaming.\r\n   * sampleRateHertz of 1600.\r\n   *\r\n   * @param {object} buffer Buffer being converted\r\n   */\r\n  convertFloat32ToInt16(buffer) {\r\n    let l = buffer.length;\r\n    let buf = new Int16Array(l / 3);\r\n\r\n    while (l--) {\r\n      if (l % 3 === 0) {\r\n        buf[l / 3] = buffer[l] * 0xffff;\r\n      }\r\n    }\r\n    return buf.buffer;\r\n  }\r\n}\r\n\r\nexport default AudioSpeech;\r\n","// eslint-disable-next-line\r\nexport default {\r\n  endpoint:\r\n    process.env.NODE_ENV === \"development\"\r\n      ? \"http://localhost:5000/api\"\r\n      : \"/api\",\r\n  socketEndpoint:\r\n    process.env.NODE_ENV === \"development\"\r\n      ? \"http://localhost:5005\"\r\n      : \"https://proxy-prescience.herokuapp.com/\",\r\n  speechToText:\r\n    process.env.NODE_ENV === \"development\" ? \"http://localhost:5000\" : \"/\",\r\n  fallback_lang: \"en-US\", // <- fallback language code, if history mode or network is unavailable\r\n  voice: \"native\", // <- voice of Text-To-Speech; for reference, see: https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisVoice/voiceURI\r\n  codecs: {\r\n    // <- tells browser the mime types of audio in Dialogflow\r\n    OUTPUT_AUDIO_ENCODING_UNSPECIFIED: \"audio/wav\",\r\n    OUTPUT_AUDIO_ENCODING_LINEAR_16: \"audio/wav\",\r\n    OUTPUT_AUDIO_ENCODING_MP3: \"audio/mpeg\",\r\n    OUTPUT_AUDIO_ENCODING_OGG_OPUS: \"audio/ogg\",\r\n  },\r\n  timeout: {\r\n    afterMessageTextToMicrophone: 500,\r\n    voiceRecognitionEndTimeout: 2500,\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport AudioRecorder from \"audio-recorder-polyfill\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\n/* Context */\r\nimport { DialogFlowContext } from \"../../Context\";\r\n\r\n/* Utility */\r\nimport AudioSpeech from \"../../utils/transcribe\";\r\n\r\nwindow.MediaRecorder = AudioRecorder;\r\n\r\nlet recognition = null;\r\nlet recorder = null;\r\nlet AudioSpeechInstances = null;\r\n\r\nfunction ChatField({ submit: submitFun, stopOthersSound }) {\r\n  const [interimResults, setInterimResults] = React.useState(\"\");\r\n  const [query, setQuery] = React.useState(\"\");\r\n\r\n  const { contextActions, contextState } = React.useContext(DialogFlowContext);\r\n  const { shouldListen, disabled = false, microphone } = contextState;\r\n\r\n  const handleMicrophoneActions = async (activate = false) => {\r\n    // let temp_audio_closing = null;\r\n\r\n    if (activate) {\r\n      stopOthersSound();\r\n\r\n      // if (window.webkitSpeechRecognition || window.SpeechRecognition) {\r\n      //   contextActions.setMicrophone(true);\r\n\r\n      //   recognition =\r\n      //     new window.webkitSpeechRecognition() ||\r\n      //     new window.SpeechRecognition();\r\n      //   recognition.continuous = true;\r\n\r\n      //   recognition.interimResults = true;\r\n      //   recognition.lang = Config.fallback_lang;\r\n\r\n      //   let final_query = \"\";\r\n      //   let local_query = \"\";\r\n\r\n      //   recognition.onresult = (event) => {\r\n      //     clearTimeout(temp_audio_closing);\r\n\r\n      //     local_query = \"\";\r\n\r\n      //     for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n      //       local_query = event.results[i][0].transcript;\r\n\r\n      //       if (event.results[i].isFinal)\r\n      //         final_query = final_query + event.results[i][0].transcript;\r\n      //     }\r\n\r\n      //     setQuery(local_query);\r\n\r\n      //     temp_audio_closing = setTimeout(() => {\r\n      //       recognition.stop();\r\n      //     }, Config.timeout.voiceRecognitionEndTimeout);\r\n      //   };\r\n\r\n      //   recognition.onend = () => {\r\n      //     recognition.stop();\r\n      //     contextActions.setMicrophone(false);\r\n\r\n      //     submit({ text: final_query });\r\n      //     setQuery(\"\");\r\n      //   };\r\n\r\n      //   recognition.onerror = (e) => {\r\n      //     console.log(\"Recognition error\", e);\r\n      //     contextActions.setMicrophone(false);\r\n      //   };\r\n\r\n      //   recognition.start();\r\n      // }\r\n      // else if (window.MediaRecorder) {\r\n      // navigator.mediaDevices\r\n      //   .getUserMedia({ audio: true })\r\n      //   .then((stream) => {\r\n      //     recorder = new window.MediaRecorder(stream);\r\n      //     recorder.addEventListener(\"dataavailable\", (recording) => {\r\n      //       console.log(\"there\");\r\n      //       const reader = new FileReader();\r\n      //       reader.readAsDataURL(recording.data);\r\n      //       reader.onloadend = () => {\r\n      //         submit({\r\n      //           audio: reader.result.replace(/^data:.+;base64,/, \"\"),\r\n      //         });\r\n      //       };\r\n      //     });\r\n      //     hark(recorder.stream).on(\"stopped_speaking\", () => {\r\n      //       contextActions.setMicrophone(false);\r\n      //       handleMicrophoneActions(false);\r\n      //       // recorder.stop();\r\n      //     }); // <- Speech end detection\r\n      //     recorder.start();\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     console.error(err);\r\n      //     contextActions.setMicrophone(false);\r\n      //   });\r\n      // }\r\n      // else {\r\n      function handleDataReceived(results, isFinal = false) {\r\n        // let results = data?.alternatives[0]?.transcript;\r\n        if (results) {\r\n          if (isFinal) {\r\n            setInterimResults(\"\");\r\n            setQuery((query) => query + results);\r\n          } else setInterimResults(results);\r\n        }\r\n      }\r\n\r\n      function closeAll() {\r\n        AudioSpeechInstances = null;\r\n        contextActions.setMicrophone(false);\r\n        handleMicrophoneActions(false);\r\n      }\r\n\r\n      AudioSpeechInstances = new AudioSpeech();\r\n\r\n      contextActions.setMicrophone(true);\r\n\r\n      AudioSpeechInstances.initRecording(\r\n        handleDataReceived.bind(this),\r\n        closeAll,\r\n        submitConversation,\r\n        (error) => {\r\n          console.error(\"Error when transcribing\", error);\r\n          contextActions.setMicrophone(false);\r\n        }\r\n      );\r\n      // }\r\n    } else {\r\n      if (microphone) contextActions.setMicrophone(false);\r\n      if (recognition) {\r\n        recognition.abort();\r\n      }\r\n      if (recorder) {\r\n        recorder.stop();\r\n      }\r\n      if (AudioSpeechInstances) {\r\n        AudioSpeechInstances.stopRecording();\r\n      }\r\n    }\r\n  };\r\n\r\n  const submitConversation = (query) => {\r\n    submit({ text: query });\r\n  };\r\n\r\n  const submit = (submission) => {\r\n    setQuery(\"\");\r\n    setInterimResults(\"\");\r\n    if (submission.text && submission.text.length > 0) {\r\n      submitFun({ type: \"text\", payload: submission });\r\n    }\r\n  };\r\n\r\n  const handleQueryChange = (e) => {\r\n    setQuery(e.target.value);\r\n  };\r\n\r\n  const handleQueryFocus = (e) => {\r\n    handleMicrophoneActions(false);\r\n    stopOthersSound();\r\n  };\r\n\r\n  const handleQueryKeyDown = (e) => {\r\n    if (e.code === \"Enter\") submit({ text: query });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (shouldListen) {\r\n      if (microphone) {\r\n        handleMicrophoneActions(true);\r\n        setQuery(\"\");\r\n      } else handleMicrophoneActions(false);\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [microphone]);\r\n\r\n  const isMicrophoneSupported = React.useMemo(() => {\r\n    return (\r\n      window.webkitSpeechRecognition ||\r\n      window.SpeechRecognition ||\r\n      !window.MediaRecorder.notSupported\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"chat-field\">\r\n      <div className=\"chat-field-container\">\r\n        <div className=\"chat-field-flexible\">\r\n          {/* Text input  */}\r\n          <input\r\n            value={query + interimResults}\r\n            className=\"chat-field-input\"\r\n            type=\"text\"\r\n            autoFocus\r\n            placeholder={\"Message\"}\r\n            aria-label={\"Message\"}\r\n            disabled={disabled}\r\n            onKeyDown={handleQueryKeyDown}\r\n            onFocus={handleQueryFocus}\r\n            onChange={handleQueryChange}\r\n          />\r\n\r\n          {/* Send message button (arrow button)  */}\r\n          <div name=\"chat-field-button-animation\" mode=\"out-in\">\r\n            {(!microphone && query.length > 0) || !isMicrophoneSupported ? (\r\n              <button\r\n                key=\"send\"\r\n                className=\"chat-field-action\"\r\n                title={\"Send\"}\r\n                aria-label={\"Send\"}\r\n                disabled={disabled}\r\n                onClick={() => {\r\n                  submit({ text: query });\r\n                }}\r\n              >\r\n                <i className=\"material-icons\" aria-hidden=\"true\">\r\n                  arrow_upward\r\n                </i>\r\n              </button>\r\n            ) : (\r\n              <>\r\n                {/* Microphone Button  */}\r\n                <button\r\n                  key=\"microphone\"\r\n                  className={classnames(\"chat-field-action\", {\r\n                    mic_active: Boolean(microphone),\r\n                  })}\r\n                  aria-label={\"Voice Input\"}\r\n                  title={\"Voice Input\"}\r\n                  disabled={disabled}\r\n                  onClick={() => {\r\n                    if (shouldListen === false && microphone === false) {\r\n                      contextActions.setShouldListen(true);\r\n                    }\r\n                    contextActions.setMicrophone(!microphone);\r\n                  }}\r\n                >\r\n                  <i className=\"material-icons\" aria-hidden=\"true\">\r\n                    mic\r\n                  </i>\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nChatField.propTypes = {\r\n  submit: PropTypes.func.isRequired,\r\n  stopOthersSound: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(ChatField);\r\n","import React from \"react\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction RichComponent({ me, fullwidth, children }) {\r\n  return (\r\n    <div\r\n      className={classnames(\"rich-component\", { me: me, fullwidth: fullwidth })}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nRichComponent.propTypes = {\r\n  me: PropTypes.bool,\r\n  fullwidth: PropTypes.bool,\r\n};\r\n\r\nexport default React.memo(RichComponent);\r\n","import React from \"react\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\nfunction RichBubble({ text = \"\", me, loading }) {\r\n  return (\r\n    <div\r\n      className={classnames(\"rich-bubble\", {\r\n        me: me,\r\n        loading: loading,\r\n      })}\r\n      tabIndex=\"0\"\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n}\r\n\r\nRichBubble.propTypes = {\r\n  text: PropTypes.string,\r\n  me: PropTypes.bool,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nexport default React.memo(RichBubble);\r\n","import React from \"react\";\r\n\r\n/* UUID */\r\nimport { v4 } from \"uuid\";\r\n\r\n/* Styles */\r\nimport \"./styles.scss\";\r\n\r\n/* Context */\r\nimport { DialogFlowContext } from \"../../Context\";\r\n\r\n/* Components */\r\nimport WelcomeView from \"../WelcomeView\";\r\nimport TopHead from \"../TopHead\";\r\nimport TopHeadAction from \"../TopHeadAction\";\r\nimport ErrorMessage from \"../ErrorMessage\";\r\nimport ChatField from \"../ChatField\";\r\nimport RichComponent from \"../RichComponent\";\r\nimport RichBubble from \"../RichBubble\";\r\n\r\nimport config from \"../../configuration\";\r\n\r\nlet audio = new Audio();\r\nlet queue = [];\r\n\r\nconst predefinedData = {\r\n  name: \"Mark\",\r\n};\r\n\r\nfunction App({ socket }) {\r\n  const [initialized, setInitialized] = React.useState(false);\r\n\r\n  const { contextState, contextActions } = React.useContext(DialogFlowContext);\r\n  const { session: sessionId, messages, disabled, shouldListen } = contextState;\r\n\r\n  const contextStateRef = React.useRef(contextState);\r\n\r\n  React.useEffect(() => {\r\n    contextStateRef.current = contextState;\r\n  }, [contextState]);\r\n\r\n  React.useEffect(() => {\r\n    /* Initialize socket if not Initialized */\r\n    if (!socket.isInitialized()) initializeSocket();\r\n\r\n    /* End Socket connection on end */\r\n    return () => {\r\n      if (socket) socket.close();\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const initializeSocket = async () => {\r\n    if (!socket.isInitialized()) {\r\n      socket.createSocket();\r\n\r\n      socket.on(\"bot_uttered\", handleResponse);\r\n\r\n      socket.on(\"connect\", () => {\r\n        socket.emit(\"session_request\", {\r\n          session_id: sessionId,\r\n        });\r\n      });\r\n\r\n      // When session_confirm is received from the server:\r\n      socket.on(\"session_confirm\", (sessionObject) => {\r\n        const remoteId =\r\n          sessionObject && sessionObject.session_id\r\n            ? sessionObject.session_id\r\n            : sessionObject;\r\n\r\n        console.log(\r\n          `session_confirm:${socket.socket.id} session Id:${remoteId}`\r\n        );\r\n\r\n        contextActions.setSession(socket.socket.id);\r\n        WelcomeInit();\r\n      });\r\n\r\n      socket.on(\"disconnect\", (reason) => {\r\n        console.log(reason);\r\n        if (reason !== \"io client disconnect\") {\r\n          socket.close();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const WelcomeInit = () => {\r\n    if (!sessionId) return;\r\n\r\n    /* Send predefined data to Rasa on initialize itself */\r\n    const text = \"/greet\" + JSON.stringify(predefinedData);\r\n\r\n    sendRequest({\r\n      payload: { text: text },\r\n    });\r\n\r\n    setInitialized(true);\r\n  };\r\n\r\n  /* Stop all Audio */\r\n  const stopFeedback = () => {\r\n    if (window.speechSynthesis) window.speechSynthesis.cancel();\r\n    if (audio && !audio.paused) {\r\n      if (queue.length > 0) queue.shift();\r\n      audio.pause();\r\n    }\r\n  };\r\n\r\n  /* Mute Audio */\r\n  const handleMuted = (muted) => {\r\n    audio.muted = muted;\r\n    if (muted) stopFeedback();\r\n    contextActions.setIsMuted(muted);\r\n  };\r\n\r\n  const handleListen = (shouldListen) => {\r\n    contextActions.setShouldListen(shouldListen);\r\n  };\r\n\r\n  /* Handle Response from Socket */\r\n  const handleResponse = async (response) => {\r\n    let contextState = contextStateRef.current;\r\n\r\n    const res = response.attachment;\r\n\r\n    /* Add to Chat Stack */\r\n    addToMessageList(res);\r\n\r\n    /* If microphone is ON , off it */\r\n    if (contextState.microphone) {\r\n      contextActions.setMicrophone(false);\r\n    }\r\n\r\n    /* Here we use queue because audio needed to be played one by one even if message comes at different timing */\r\n    /* If queue is empty, add to queue and start audio speech function, or else add it stack, so whenever current current node ends, this will start */\r\n    if (queue.length === 0) {\r\n      queue.push(res);\r\n      const queueData = queue[0];\r\n      handleAudioSpeech(queueData);\r\n    } else {\r\n      queue.push(res);\r\n    }\r\n  };\r\n\r\n  const handleAudioSpeech = async (response) => {\r\n    let contextState = contextStateRef.current;\r\n\r\n    function callback() {\r\n      const queueData = queue[0];\r\n\r\n      if (queueData) handleAudioSpeech(queueData);\r\n    }\r\n\r\n    if (!contextState.muted) {\r\n      if (response.payload.audioOutput) {\r\n        /* Detect MIME type (or fallback to default) */\r\n        const mime = config.codecs.OUTPUT_AUDIO_ENCODING_UNSPECIFIED;\r\n        audio.src = `data:${mime};base64,${response.payload.audioOutput}`;\r\n\r\n        audio.onended = () => {\r\n          queue.shift();\r\n\r\n          /* If Queue is empty, that means there is no other audio output in waiting */\r\n          if (queue.length === 0) {\r\n            /* Check whether automatic listen is enabled */\r\n            if (contextState.shouldListen) {\r\n              setTimeout(() => {\r\n                contextActions.setMicrophone(true);\r\n              }, config.timeout.afterMessageTextToMicrophone);\r\n            }\r\n          } else {\r\n            callback();\r\n          }\r\n        };\r\n\r\n        audio.onerror = () => {\r\n          queue.shift();\r\n        };\r\n\r\n        audio.play();\r\n      } else {\r\n        /* If Audio output does not exists , use inbuilt Speech Synthesis */\r\n        const speech = new SpeechSynthesisUtterance(response.payload.text);\r\n        speech.voiceURI = config.voice;\r\n        speech.lang = config.fallback_lang;\r\n\r\n        speech.onend = () => {\r\n          queue.shift();\r\n\r\n          /* Check microphone should on Listen on Audio Output */\r\n          if (queue.length === 0) {\r\n            if (contextState.shouldListen) {\r\n              setTimeout(() => {\r\n                contextActions.setMicrophone(true);\r\n              }, config.timeout.afterMessageTextToMicrophone);\r\n            }\r\n          } else {\r\n            callback();\r\n          }\r\n        };\r\n\r\n        if (!contextState.muted) window.speechSynthesis.speak(speech);\r\n      }\r\n    } else {\r\n      queue = [];\r\n\r\n      if (contextState.shouldListen) {\r\n        setTimeout(() => {\r\n          contextActions.setMicrophone(true);\r\n        }, config.timeout.afterMessageTextToMicrophone);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sendRequest = (data) => {\r\n    if (!sessionId) return;\r\n\r\n    addToMessageList(data, true);\r\n\r\n    stopFeedback();\r\n    contextActions.setError(null);\r\n\r\n    console.log(\"sending payload\", data);\r\n\r\n    socket.emit(\"user_uttered\", {\r\n      message: data.payload.text,\r\n      customData: {\r\n        language: \"en\",\r\n      },\r\n      session_id: sessionId,\r\n    });\r\n  };\r\n\r\n  const addToMessageList = (message, user = false) => {\r\n    const finalRespond = {\r\n      id: v4(),\r\n      me: user,\r\n      ...message,\r\n    };\r\n\r\n    contextActions.addMessage(finalRespond);\r\n  };\r\n\r\n  const reset = () => {\r\n    stopFeedback();\r\n    contextActions.resetAll();\r\n    setInitialized(true);\r\n\r\n    socket.close();\r\n    initializeSocket();\r\n  };\r\n\r\n  return (\r\n    <main id=\"app\" {...(!initialized && { onClick: () => WelcomeInit() })}>\r\n      {initialized && (\r\n        <TopHead>\r\n          <TopHeadAction\r\n            title={contextState.muted ? \"Unmute\" : \"Mute\"}\r\n            icon={contextState.muted ? \"volume_off\" : \"volume_up\"}\r\n            toggle={() => {\r\n              handleMuted(!contextState.muted);\r\n            }}\r\n          />\r\n          <TopHeadAction\r\n            title={shouldListen ? \"Hearing Enabled\" : \"Hearing disabled\"}\r\n            icon={shouldListen ? \"hearing\" : \"hearing_disabled\"}\r\n            toggle={() => {\r\n              handleListen(!shouldListen);\r\n            }}\r\n          />\r\n          <TopHeadAction title={\"Reset\"} icon={\"backspace\"} toggle={reset} />\r\n        </TopHead>\r\n      )}\r\n\r\n      <section className=\"chat\">\r\n        {/* Error component is for displaying errors */}\r\n        {contextState.error && <ErrorMessage message={contextState.error} />}\r\n\r\n        {/* Welcome component is for onboarding experience */}\r\n        {messages.length === 0 ? (\r\n          <WelcomeView />\r\n        ) : (\r\n          <section aria-live=\"polite\">\r\n            {messages.map((message) => {\r\n              /* Custom Component can be added here */\r\n              switch (message.type) {\r\n                case \"text\":\r\n                  return (\r\n                    <RichComponent key={message.id} me={message.me ?? false}>\r\n                      {message.payload && (\r\n                        <RichBubble\r\n                          me={message.me ?? false}\r\n                          {...message.payload}\r\n                        />\r\n                      )}\r\n                    </RichComponent>\r\n                  );\r\n                default:\r\n                  return null;\r\n              }\r\n            })}\r\n          </section>\r\n        )}\r\n      </section>\r\n\r\n      {/* ChatField is made for submitting queries and displaying suggestions */}\r\n      <ChatField\r\n        submit={sendRequest}\r\n        stopOthersSound={stopFeedback}\r\n        disabled={disabled || !initialized}\r\n      ></ChatField>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import io from \"socket.io-client\";\r\n\r\nfunction SocketIO(socketUrl, customData, path) {\r\n  const options = path ? { path } : {};\r\n  const socket = io(socketUrl, options);\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(`connect:${socket.id}`);\r\n    socket.customData = customData;\r\n  });\r\n\r\n  socket.on(\"connect_error\", (error) => {\r\n    console.log(error);\r\n  });\r\n\r\n  socket.on(\"error\", (error) => {\r\n    console.log(error);\r\n  });\r\n\r\n  socket.on(\"disconnect\", (reason) => {\r\n    console.log(reason);\r\n  });\r\n\r\n  return socket;\r\n}\r\n\r\nclass Socket {\r\n  constructor(url, customData, path) {\r\n    this.url = url;\r\n    this.customData = customData;\r\n    this.path = path;\r\n\r\n    this.socket = null;\r\n    this.onEvents = [];\r\n    this.marker = Math.random();\r\n  }\r\n\r\n  isInitialized() {\r\n    return this.socket !== null && this.socket.connected;\r\n  }\r\n\r\n  on(event, callback) {\r\n    if (!this.socket) {\r\n      this.onEvents.push({ event, callback });\r\n    } else {\r\n      this.socket.on(event, callback);\r\n    }\r\n  }\r\n\r\n  emit(message, data) {\r\n    if (this.socket) {\r\n      this.socket.emit(message, data);\r\n    }\r\n  }\r\n\r\n  close() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n    }\r\n  }\r\n\r\n  createSocket() {\r\n    this.socket = SocketIO(this.url, this.customData, this.path);\r\n    // We set a function on session_confirm here so as to avoid any race condition\r\n    // this will be called first and will set those parameters for everyone to use.\r\n    this.socket.on(\"session_confirm\", (sessionObject) => {\r\n      this.sessionConfirmed = true;\r\n      this.sessionId =\r\n        sessionObject && sessionObject.session_id\r\n          ? sessionObject.session_id\r\n          : sessionObject;\r\n    });\r\n    this.onEvents.forEach((event) => {\r\n      this.socket.on(event.event, event.callback);\r\n    });\r\n\r\n    this.onEvents = [];\r\n  }\r\n}\r\n\r\nexport default Socket;\r\n","import React from \"react\";\r\n\r\n/* Components */\r\nimport Main from \"./Components/Main/Main\";\r\n\r\n/* Socket */\r\nimport Socket from \"./utils/socket\";\r\n\r\nimport config from \"./configuration\";\r\n\r\nlet store = null;\r\n\r\nfunction Widget() {\r\n  const instanceSocket = React.useRef({});\r\n\r\n  /* Create Socket instances if it is not created */\r\n  if (!instanceSocket.current.url && !(store && store.socketRef)) {\r\n    console.log(\"init socket\");\r\n\r\n    /* Create Socket instances if it is not created */\r\n    instanceSocket.current = new Socket(\r\n      config.socketEndpoint,\r\n      {\r\n        language: \"en\",\r\n      },\r\n      \"/socket.io/\"\r\n    );\r\n  }\r\n\r\n  /* Use Socket instances if it is created already */\r\n  if (!instanceSocket.current.url && store && store.socketRef) {\r\n    instanceSocket.current = store.socket;\r\n  }\r\n\r\n  if (!store) {\r\n    store = {};\r\n    store.socketRef = instanceSocket.current.marker;\r\n    store.socket = instanceSocket.current;\r\n  }\r\n\r\n  return <Main socket={instanceSocket.current} />;\r\n}\r\n\r\nexport default React.memo(Widget);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n/* Context */\r\nimport { DialogFlowContextProvider } from \"./Context\";\r\n\r\n/* Components */\r\nimport Widget from \"./Widget\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DialogFlowContextProvider>\r\n      <Widget />\r\n    </DialogFlowContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}